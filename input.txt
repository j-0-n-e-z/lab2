Человек в своей жизни часто сталкивается с работой с электронными документами. Удобное представление информации упрощает ее обработку. Но часто документ представлен в неудобном для работы формате. Например, формат PDF (Portable Document Format) позволяет просматривать документы в удобном для печати виде на любых устройствах, без искажений внешнего вида. Большинство современных средств печати поддерживает работу с данным форматом, что позволяет производить печать документов в данном формате без использования какого-либо программного обеспечения.
Трудность работы с форматом PDF заключается в том, что он не предоставляет пользователю возможности удобной обработки информации. Чаще всего для этого необходимо перевести файл в другой формат, например, текстовый или формат документа Word. В процессе преобразования файла из PDF в другой формат, может произойти искажение данных, утеря важных частей или извлечение ненужной информации. Прежде всего это может быть обусловлено тем, что PDF ориентирован на визуальное представление информации, а не на ее корректировку, извлечение, программное чтение.
В данной работе рассматривается процесс преобразования файла из формата PDF в формат TXT с извлечением исключительно текстовых блоков, несущих смысловую нагрузку. На рынке программного обеспечения существуют решения для извлечения текстовых данных из PDF-документов, такие как PDF Focus, PDF2Go или Tika, которые на выходе дают файл с расширением .txt или .docx, но он не всегда является тем, что пользователь ожидает. Могут возникать проблемы с представлением формул, графиков, таблиц, переходов между страницами, нумерацией страниц и т.д.
Актуальность данной работы связана с тем, что подобное решение будет полезно для таких задач как перевод текста, потому что часто для этого необходим «чистый текст» без графиков, формул, отступов и т.п. и многих других задач по работе с текстами, решаемых сегодня повсеместно.
Объектом является представление текстовой информации в электронном виде.
В качестве предмета исследования данной работы выступает формат документов PDF и процесс извлечения информации из этих документов.
Целью данной работы является разработка приложения для преобразования PDF-документов в текстовый формат с извлечением текстовых данных, несущих смысловую нагрузку.
В качестве платформы для реализации средства извлечения текста из PDF-документа был выбран Python версии 3.9, т.к. было решено использовать библиотеку для извлечения текстовых данных из PDF-документов PDFMiner, которая разработана на Python. Стоит отметить также, что Python имеет низкий порог входа ввиду простого синтаксиса, широко применяется и обладает мощной поддержкой и сообществом.
Для реализации клиента был выбран Angular 12 – фреймворк от компании Google для создания клиентских приложений. Angular предоставляет такую функциональность, как двустороннее связывание, позволяющее динамически изменять данные в одном месте интерфейса при изменении данных модели в другом, шаблоны, маршрутизация и так далее. Одной из ключевых особенностей Angular является то, что он использует в качестве языка программирования TypeScript [3].
В качестве сервера будет использоваться сервер на Node.js, который часто используется с Angular и требуется для его работы. Node.js – программная платформа, основанная на движке V8, превращающая JavaScript из узкоспециализированного языка в язык общего назначения. Node.js добавляет возможность JavaScript подключать другие внешние библиотеки, написанные на разных языках, обеспечивая вызовы к ним из JavaScript-кода [4]. Данная особенность позволит подключить на сервере скрипт, написанный на языке Python, который выполняет операцию извлечения текста из загруженного PDF-документа.
В качестве сред разработки будут использоваться PyCharm от компании JetBrains для написания скрипта на Python и WebStorm от той же компании для разработки клиента и сервера.
В процессе разработки собственного решения по извлечению текста из PDF-документов был проведен анализ существующих решений, их функций и свойств, который показал, что в открытом доступе отсутствуют прямые аналоги разрабатываемого решения. Были выявлены критерии для оценивания данных решений с точки зрения пользовательского использования и использования подключаемых библиотек программистом. На основе оценки решений по отобранным критериям были установлены функциональные и нефункциональные требования к разрабатываемой системе. Основываясь на объявленных требованиях, был проведен этап проектирования системы. Было также установлено, что анализ текстовых данных не позволяет выполнить требование об автоматическом удалении определенного вида текстовых данных ввиду особенности структур различных PDF-документов и отсутствия возможности точной идентификации каждого отдельного элемента в тексте.
Этап реализации спроектированной системы был успешно выполнен, но на данный момент не было проведено модульное тестирование, что планируется сделать в ближайшем будущем. Также во время реализации было выявлено, что для более быстрого удаления или выделения предложений не хватает множественного выделения элементов и возможности редактирования текста предложений, т.к. выявлены случаи, когда ошибочные элементы определялись с текстом предложения в один целый элемент. Описанные недостатки, а также доработку стилей страницы клиента, планируется зафиксировать и исправить.
Дальнейшая доработка текущего решения, тем не менее, скорее всего не позволит решить основную бизнес-задачу – автоматическое выявление и удаление определенных текстовых данных. Данная задача, возможно, могла бы быть решена иными средствами, не рассмотренными в результате выполнения данной работы, например, при помощи компьютерного зрения.