Человек в своей жизни часто сталкивается с работой с электронными документами. Удобное представление информации упрощает ее обработку. Но часто документ представлен в неудобном для работы формате. Например, формат PDF (Portable Document Format) позволяет просматривать документы в удобном для печати виде на любых устройствах, без искажений внешнего вида. Большинство современных средств печати поддерживает работу с данным форматом, что позволяет производить печать документов в данном формате без использования какого-либо программного обеспечения.
Трудность работы с форматом PDF заключается в том, что он не предоставляет пользователю возможности удобной обработки информации. Чаще всего для этого необходимо перевести файл в другой формат, например, текстовый или формат документа Word. В процессе преобразования файла из PDF в другой формат, может произойти искажение данных, утеря важных частей или извлечение ненужной информации. Прежде всего это может быть обусловлено тем, что PDF ориентирован на визуальное представление информации, а не на ее корректировку, извлечение, программное чтение.
В данной работе рассматривается процесс преобразования файла из формата PDF в формат TXT с извлечением исключительно текстовых блоков, несущих смысловую нагрузку. На рынке программного обеспечения существуют решения для извлечения текстовых данных из PDF-документов, такие как PDF Focus, PDF2Go или Tika, которые на выходе дают файл с расширением .txt или .docx, но он не всегда является тем, что пользователь ожидает. Могут возникать проблемы с представлением формул, графиков, таблиц, переходов между страницами, нумерацией страниц и т.д.
Актуальность данной работы связана с тем, что подобное решение будет полезно для таких задач как перевод текста, потому что часто для этого необходим «чистый текст» без графиков, формул, отступов и т.п. и многих других задач по работе с текстами, решаемых сегодня повсеместно.
Объектом является представление текстовой информации в электронном виде.
В качестве предмета исследования данной работы выступает формат документов PDF и процесс извлечения информации из этих документов.
Целью данной работы является разработка приложения для преобразования PDF-документов в текстовый формат с извлечением текстовых данных, несущих смысловую нагрузку.
В качестве платформы для реализации средства извлечения текста из PDF-документа был выбран Python версии 3.9, т.к. было решено использовать библиотеку для извлечения текстовых данных из PDF-документов PDFMiner, которая разработана на Python. Стоит отметить также, что Python имеет низкий порог входа ввиду простого синтаксиса, широко применяется и обладает мощной поддержкой и сообществом.
Для реализации клиента был выбран Angular 12 – фреймворк от компании Google для создания клиентских приложений. Angular предоставляет такую функциональность, как двустороннее связывание, позволяющее динамически изменять данные в одном месте интерфейса при изменении данных модели в другом, шаблоны, маршрутизация и так далее. Одной из ключевых особенностей Angular является то, что он использует в качестве языка программирования TypeScript [3]. 
В качестве сервера будет использоваться сервер на Node.js, который часто используется с Angular и требуется для его работы. Node.js – программная платформа, основанная на движке V8, превращающая JavaScript из узкоспециализированного языка в язык общего назначения. Node.js добавляет возможность JavaScript подключать другие внешние библиотеки, написанные на разных языках, обеспечивая вызовы к ним из JavaScript-кода [4]. Данная особенность позволит подключить на сервере скрипт, написанный на языке Python, который выполняет операцию извлечения текста из загруженного PDF-документа.
В качестве сред разработки будут использоваться PyCharm от компании JetBrains для написания скрипта на Python и WebStorm от той же компании для разработки клиента и сервера.
Автор работы: Габдуллин Рустам Илдусович, студент третьего курса образовательной программы «Программная инженерия».
Наименование: Разработка компонента извлечения текста из файлов в формате PDF.
Руководитель: Фролова Наталья Владимировна, доцент кафедры информационных технологий в бизнесе.
Данная работа посвящена разработке компонента для извлечения текстов из файлов в формате PDF. В первой главе осуществляется анализ предметной области, рассматривается формат PDF, а также сравниваются существующие решения и формируются требования. Во второй главе рассматривается процесс проектирования системы, рассматриваются слои системы, ее компоненты и проектируется пользовательский интерфейс. Третья глава содержит описание разработки приложения, а также результаты тестирования.
Работа содержит 34 страницы А4 основного текста, в основной части содержится 2 таблицы и 15 иллюстраций.
Анализ является одним из ключевых этапов разработки. Для проведения анализа требуется подобрать как минимум три похожих решения из той же или смежной предметной области, соотнести их по определенным свойствам, которыми может обладать разрабатываемое решение, а также выявить ограничения и преимущества выбранных решений для того чтобы в дальнейшем по результатам анализа сформировать требования к разрабатываемой системе.
В сети Интернет в открытом доступе имеется немалое количество решений, обладающих функционалом извлечения текста из документов в формате PDF. В процессе поиска аналогичных решений наличие прямых аналогов выявлено не было, а также было замечено, что многие решения обладают схожим функционалом, в следствие чего были отобраны три наиболее отличающихся друг от друга решения.
В качестве решений могут выступать как готовые для пользователя приложения, например, настольные приложения, Web-приложения, расширения и плагины, так и библиотеки, которые необходимо программно подключить в среде разработки. Данный разброс в типе решений связан с возможным задействованием одного из существующих решений в разработке собственного решения, а также в том, что решение может быть составным компонентом системы и поставляться в качестве подключаемой библиотеки, поэтому данную особенность требуется учесть. В оценивание подключаемых библиотек и иных программных средств, помимо указанных далее критериев, стоит также включить доступность библиотеки со стороны документации, сложность использования программного средства, аппаратное и программное обеспечение, необходимое для работы данного продукта; в результирующей таблице данные критерии указаны не будут ввиду своей специфики.
Как можно увидеть из таблицы выше, ни одно решение не обладает автоматическим удалением текстовых данных, одно решение лишь частично поддерживает кириллицу и два решения являются полностью бесплатными. Стоит отметить, что из полученных ранее результатов решение PDFMiner могло бы быть использовано при решении задачи, т.к. оно является абсолютно бесплатным, обладает поддержкой кириллицы и определением отдельных абзацев по сравнению с тремя другими решениями, которые либо не соответствуют перечисленным критериям, либо соответствуют лишь частично. Собственное решение будет нацелено на соответствие всем указанным в таблице выше критериям. На основе результатов анализа требуется составить требования к разрабатываемой системе.
В данном разделе будут описаны функциональные и нефункциональные требования к разрабатываемой системе, составленные на основе анализа существующих решений, а также построена диаграмма прецедентов USE-CASE.
В качестве входных данных выступает PDF-документ, а в качестве выходных данных TXT-документ.
Разрабатываемая система будет представлять из себя клиент-серверной приложение с веб-интерфейсом, в котором у пользователя будет возможность загрузить PDF-документ, получить непосредственно в интерфейсе приложения результат в виде извлеченного из PDF-документа текста, заранее очищенного от элементов, не несущих смысловой нагрузки, и разделенного на отдельные предложения, отредактировать этот результат, удалив ошибочные предложения или выбрав только нужные, и скачать итоговый документ в формате TXT. Данное решение будет схоже по пользовательскому интерфейсу с решением PDF2Go. Далее необходимо спроектировать разрабатываемое решение.
Так как система является веб-приложением, весь интерфейс основан на возможностях отображения стандартных элементов HTML в браузере.
Первоначально при первом входе по адресу приложения, пользователь имеет возможность только загрузить документ для извлечения текста – имеется стандартная кнопка загрузки документов, при нажатии на которую у пользователя появляется проводник для выбора PDF-документа, причем проводник отображает только PDF-документы.
Интерфейс приложения до загрузки PDF-документа представлен в ПРИЛОЖЕНИИ Е.
Далее после загрузки документа появляется надпись загрузки и после завершения загрузки в таблице автоматически отображаются полученные предложения после очистки.
Также отображается кнопка удаления предложения из таблицы и массива объектов и выбора предложения для добавления его в итоговый текст.
У пользователя имеется возможность отмены удаления в течение 3 секунд.
Отмена представляет из себя нажатие на кнопку «Отменить», которая появляется вместо кнопки «Удалить».
Пользователь может выбрать предложение в итоговый текст, нажав на кнопку «Выбрать» возле предложения или выбрав все предложения, нажав «Выбрать все» вверху экрана.
Пользователь может отменить свой выбор, нажав соответствующие кнопки «Отменить выбор» и «Отменить выбор всех».
После извлечения текста отображается кнопка с текстом «Скачать», после нажатия на которую появляется окно скачивания документа.
Примерный интерфейс приложения после загрузки PDF-документа представлен на Рисунке 9.
Решение PDF2Go представлено пользователю в виде web-сайта по адресу pdf2go.com.
Данное решение позволяет пользователю загружать PDF-документы с устройства или с облачных ресурсов, таких как Google Drive, для преобразования их в документ формата TXT или DOCX.
Позволяется также указывать исходный язык текста в документе для более точного интерпретирования его в текстовый формат.
После преобразования документа пользователь может скачать документ в формате TXT или DOCX в зависимости от того, какой формат был выбран.
Из ограничений данного решения стоит отметить неточное определение некоторых символов кириллицы в случае конвертации в TXT формат, что может негативно повлиять на дальнейшее использование полученного текстового файла.
Решение PDF2Go является бесплатным, но обладает некоторыми платными функциями, например, возможность редактировать полученный текст, что является одним из критериев отбора решений.
Внешний вид web-сайта решения PDF2Go приведен на Рисунке 2.
Пользователь может взаимодействовать только со слоем представления, на которым отображается графический интерфейс.
Слой бизнес-логики получает команды пользователя с представления и реагирует на них: загружает документ, редактирует результат, скачивает документ, а также выполняет обработку документов, полученных серверным слоем.
Серверный слой занимается обработкой запросов и возвратом результата представлению.
Так как документы не нуждаются во временном или постоянном хранении, а пользователей не требуется отличать друг от друга, слой хранилища не требуется.
Ниже на Рисунках 4-9 представлены диаграммы последовательностей для основных прецедентов.
Очистка извлеченных из PDF-документов данных путем использования любого из рассмотренных решений является крайне сложной задачей с точки зрения анализа полученного текста.
Колоссальное число PDF-документов имеют различные структуры текста, написаны на разных языках с их особенностями и соответствуют различным ГОСТам, не говоря уже о документах, написанных, не опираясь на какую-либо конкретную форму. При больших различиях в структурах текстов не предполагается, что есть возможность точно определить какая часть полученного в результате извлечения текста является несущей смысловую нагрузку, а какая на это не рассчитана. В результате очистки текстов программно (например, при помощи регулярных выражений), всегда остается вероятность ошибочного исключения текстового элемента, что может привести к потере смысловой целостности текста. В данном случае, обладая возможностью воспользоваться ручной очисткой текста, вся функциональная часть по очистке текста будет перенесена с автоматического режима на ручной, чтобы не допускать неуниверсальности разрабатываемого решения.